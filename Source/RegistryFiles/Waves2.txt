###################################################################################################################################
# Registry for Waves2 in the FAST Modularization Framework
# This Registry file is used to create MODULE Waves2_Types  which contains all of the user-defined types needed in Waves2.
# It also contains copy, destroy, pack,  and unpack routines associated with each defined data types.
# See NWTC Programmer's Handbook for further information on the format/contents of this file.
#
# Entries are of the form
# <keyword> <ModuleName/ModName> <TypeName>  <FieldType> <FieldName> <Dims>   <IO>  <DNAME>  <DESCRIP>   <UNITS>
#
# Use ^ as a shortcut for the value in the same column from the previous line.
###################################################################################################################################
# File last committed: $Date: 2014-06-03 13:47:16 -0600 (Tue, 03 Jun 2014) $
# (File) Revision #: $Rev: 406 $
# URL: $HeadURL: https://windsvn.nrel.gov/HydroDyn/branches/HydroDyn_2nd_order/Source/RegistryFiles/Waves2.txt $
###################################################################################################################################

# ...... Include files (definitions from NWTC Library) ............................................................................
# make sure that the file name does not have any trailing white spaces!
include  Registry_NWTC_Library.txt

# ..... Initialization data .......................................................................................................
# Define inputs that the initialization routine may need here:
#   e.g.,  the name of the input file,  the file root name,etc.
#
typedef     Waves2/Waves2     InitInputType     CHARACTER(1024)      InputFile         -        -        -        "Name of the input file"   -
typedef     ^                 ^                 CHARACTER(1024)      DirRoot           -        -        -        "The name of the root file including the full path.  This may be useful if you want this routine to write a permanent record of what it does to be stored with the simulation results: the results should be stored in a file whose name (including path) is generated by appending any suitable extension to DirRoot." -
typedef     ^                 ^                 CHARACTER(1024)      GHWvFile          -        -        -        "The root name of GH Bladed files containing wave data"  -
typedef     ^                 ^                 INTEGER              UnSum             -        -        -        "The unit number for the HydroDyn summary file" -
typedef     ^                 ^                 ReKi                 Gravity           -        -        -        "Gravitational acceleration"  (m/s^2)
typedef     ^                 ^                 DbKi                 WaveDT            -        -        -        "Time step for incident wave calculations"   (sec)
typedef     ^                 ^                 ReKi                 WtrDens           -        -        -        "Water density"   (kg/m^3)
typedef     ^                 ^                 ReKi                 WtrDpth           -        -        -        "Water depth"  (meters)
typedef     ^                 ^                 INTEGER              WaveNDir          -        -        -        "Number of wave directions [only used if WaveDirMod = 1] [Must be an odd number -- will be adjusted within the waves module]"     (-)
typedef     ^                 ^                 ReKi                 WaveDirArr        {:}      -        -        "Wave direction array.  Each frequency has a unique direction of WaveNDir > 1" (degrees)
typedef     ^                 ^                 INTEGER              NStepWave         -        -        -        "Total number of frequency components = total number of time steps in the incident wave"    -
typedef     ^                 ^                 INTEGER              NStepWave2        -        -        -        "NStepWave / 2"                                       -
typedef     ^                 ^                 ReKi                 WaveDOmega        -        -        -        "Frequency step for incident wave calculations"       (rad/s)
typedef     ^                 ^                 ReKi                 WaveElevC0        {:}{:}   -        -        "Discrete Fourier transform of the instantaneous elevation of incident waves at the platform reference point.  First column is real part, second column is imaginary part"   (meters)
typedef     ^                 ^                 ReKi                 WaveTime          {:}      -        -        "Simulation times at which the instantaneous second order loads associated with the incident waves are determined"   sec

typedef     ^                 ^                 LOGICAL              WvMnDrift         -        -        -        "Mean drift second order forces flag" (-)
typedef     ^                 ^                 LOGICAL              WvDiffQTF         -        -        -        "Full difference QTF second order forces flag" (-)
typedef     ^                 ^                 LOGICAL              WvSumQTF          -        -        -        "Full sum QTF second order forces flag" (-)
typedef     ^                 ^                 LOGICAL              PtfmSgF2          -        -        -        "Supplied by Driver:  Platform horizontal surge translation force (flag)"      -
typedef     ^                 ^                 LOGICAL              PtfmSwF2          -        -        -        "Supplied by Driver:  Platform horizontal sway  translation force (flag)"      -
typedef     ^                 ^                 LOGICAL              PtfmHvF2          -        -        -        "Supplied by Driver:  Platform vertical   heave translation force (flag)"      -
typedef     ^                 ^                 LOGICAL              PtfmRF2           -        -        -        "Supplied by Driver:  Platform roll  tilt rotation force (flag)"               -
typedef     ^                 ^                 LOGICAL              PtfmPF2           -        -        -        "Supplied by Driver:  Platform pitch tilt rotation force (flag)"               -
typedef     ^                 ^                 LOGICAL              PtfmYF2           -        -        -        "Supplied by Driver:  Platform yaw        rotation force (flag)"               -
typedef     ^                 ^                 ReKi                 WvLowCOffD        -        -        -        "Minimum frequency used in the difference methods [Ignored if all difference methods = 0]"   (rad/s)
typedef     ^                 ^                 ReKi                 WvHiCOffD         -        -        -        "Maximum frequency used in the difference methods [Ignored if all difference methods = 0]"   (rad/s)
typedef     ^                 ^                 ReKi                 WvLowCOffS        -        -        -        "Minimum frequency used in the sum-QTF method     [Ignored if SumQTF = 0]"                   (rad/s)
typedef     ^                 ^                 ReKi                 WvHiCOffS         -        -        -        "Maximum frequency used in the sum-QTF method     [Ignored if SumQTF = 0]"                   (rad/s)

# Define outputs from the initialization routine here:
#
typedef     ^                 InitOutputType    INTEGER              NStepWave         -        -        -        "Total number of frequency components = total number of time steps in the incident wave" -
typedef     ^                 ^                 INTEGER              NStepWave2        -        -        -        "NStepWave / 2" -


# ..... States ....................................................................................................................
# Define continuous (differentiable) states here:
typedef     ^              ContinuousStateType  ReKi                 DummyContState    -        -        -        "Remove this variable if you have continuous states"  -


# Define discrete (nondifferentiable) states here:
typedef     ^              DiscreteStateType    ReKi                 DummyDiscState    -        -        -        "Remove this variable if you have discrete states" -


# Define constraint states here:
typedef     ^              ConstraintStateType  ReKi                 DummyConstrState  -        -        -        "Remove this variable if you have constraint states"  -


# Define any data that are not considered actual states here:
#   e.g. data used only for efficiency purposes (indices for searching in an array,  copies of previous calculations of output at a given time, etc.)
typedef     ^              OtherStateType       INTEGER              DummyOtherState   -        -        -        "Remove this variable if you have other states" -


# ..... Parameters ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:
typedef     ^                 ParameterType     DbKi                 DT                -        -        -        "Time step for continuous state integration & discrete state update" seconds


# ..... Inputs ....................................................................................................................
# Define inputs that are contained on the mesh here:
#typedef    ^                 InputType         MeshType             MeshedInput       -        -        -        "Meshed input data"  -

# Define inputs that are not on this mesh here:
typedef     ^                 InputType         ReKi                 DummyInput        -        -        -        "Remove this variable if you have input data"   -


# ..... Outputs ...................................................................................................................
# Define outputs that are contained on the mesh here:
#typedef    ^                 OutputType        MeshType             MeshedOutput      -        -        -        "Meshed output data" -

# Define outputs that are not on this mesh here:
typedef     ^                 OutputType        ReKi                 DummyOutput       -        -        -        "Remove this variable if you have output data"  -
